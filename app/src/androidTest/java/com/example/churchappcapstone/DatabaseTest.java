package com.example.churchappcapstone;

import android.content.Context;
import android.util.Log;

import androidx.room.Room;
import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.platform.app.InstrumentationRegistry;

import com.example.churchappcapstone.database.AppDatabase;
import com.example.churchappcapstone.database.EventEntity;
import com.example.churchappcapstone.database.GroupEntity;
import com.example.churchappcapstone.database.GroupMemberEntity;
import com.example.churchappcapstone.database.LoginDatabase;
import com.example.churchappcapstone.database.LoginEntity;
import com.example.churchappcapstone.database.MemberEntity;
import com.example.churchappcapstone.database.PaymentEntity;
import com.example.churchappcapstone.database.dao.EventDao;
import com.example.churchappcapstone.database.dao.GroupDao;
import com.example.churchappcapstone.database.dao.GroupMemberDao;
import com.example.churchappcapstone.database.dao.LoginDao;
import com.example.churchappcapstone.database.dao.MemberDao;
import com.example.churchappcapstone.database.dao.PaymentDao;
import com.example.churchappcapstone.utilities.Conversions;
import com.example.churchappcapstone.utilities.SampleData;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.time.LocalDate;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

@RunWith(AndroidJUnit4.class)
public class DatabaseTest {

    public static final String APP_TEST = "app_test";
    //Login variables
    private LoginDatabase loginDatabase;
    private LoginDao loginDao;

    //Main app variables
    private AppDatabase appDatabase;
    private MemberDao memberDao;
    private GroupDao groupDao;
    private GroupMemberDao groupMemberDao;
    private EventDao eventDao;
    private PaymentDao paymentDao;

    @Before
    public void createDb() {
        Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();
        loginDatabase = Room.inMemoryDatabaseBuilder(context, LoginDatabase.class).build();
        appDatabase = Room.inMemoryDatabaseBuilder(context, AppDatabase.class).build();
        loginDao = loginDatabase.loginDao();
        memberDao = appDatabase.memberDao();
        groupDao = appDatabase.groupDao();
        groupMemberDao = appDatabase.groupMemberDao();
        eventDao = appDatabase.eventDao();
        paymentDao = appDatabase.paymentDao();
    }

    @After
    public void closeDb() {
        loginDatabase.close();
        appDatabase.close();
    }

    /////////////// Login tests ///////////////////////
    @Test
    public void InsertLoginEntities() {
        loginDao.insertAll(SampleData.getLogins());

        try {
            assertEquals(SampleData.getLogins().size(), loginDao.getCount());
        }
        catch (AssertionError e) {
            Log.i(APP_TEST, "Login entity insertion test failed: " + e.getMessage()); // Message if test failed
            throw new AssertionError(e.getMessage());
        }

        Log.i(APP_TEST, "TEST - Insert login entity passed"); // Message if test passed
    }

    @Test
    public void compareLogins() {
        loginDao.insertAll(SampleData.getLogins());
        LoginEntity original = SampleData.getLogins().get(0);
        LoginEntity fromDb = loginDao.getLoginById(1);
        try {
            assertEquals(original.getLoginEmail(), fromDb.getLoginEmail()); //Compare email addresses
            assertEquals(1, fromDb.getLoginId()); //Test for autogeneration of ID (Entity classes do not pass an ID value by default)
        }
        catch (AssertionError e) {
            Log.i(APP_TEST, "Login entity comparison test failed: " + e.getMessage());
            throw new AssertionError(e.getMessage());
    }
        Log.i(APP_TEST, "TEST - Login database member successfully matched to sample data; ID correctly generated by database");
    }
///////////////////////////////////////////////////////////////////////////////
    //////////// Main app tests //////////////////

    @Test
    public void InsertEntity() {
        memberDao.insertAll(SampleData.getMembers());
        groupDao.insertAll(SampleData.getGroups());
        groupMemberDao.insertAll(SampleData.getGroupMembers());
        eventDao.insertAll(SampleData.getEvents());
        paymentDao.insertAll(SampleData.getPayments());

        try {
            assertEquals(SampleData.getMembers().size(), memberDao.getCount());
            assertEquals(SampleData.getGroupMembers().size(), groupMemberDao.getCount());
            assertEquals(SampleData.getGroups().size(), groupDao.getCount());
            assertEquals(SampleData.getEvents().size(), eventDao.getCount());
            assertEquals(SampleData.getPayments().size(), paymentDao.getCount());
        }
        catch (AssertionError e) {
            Log.i(APP_TEST, "Insertion test failed: " + e.getMessage());
            throw new AssertionError(e.getMessage());
        }
        Log.i(APP_TEST, "TEST - Insert app entities passed");
    }

    @Test
    public void updateEntity() {
        memberDao.insertAll(SampleData.getMembers());
        groupDao.insertAll(SampleData.getGroups());
        groupMemberDao.insertAll(SampleData.getGroupMembers());
        eventDao.insertAll(SampleData.getEvents());
        paymentDao.insertAll(SampleData.getPayments());

        MemberEntity member = memberDao.getMemberById(1);
        GroupMemberEntity groupMember = groupMemberDao.getGroupMemberById(1);
        GroupEntity group = groupDao.getGroupById(1);
        EventEntity event = eventDao.getEventById(1);
        PaymentEntity payment = paymentDao.getPaymentById(1);

        member.setFirstName("TEST_NAME");
        groupMember.setStartDate(Conversions.localDatetoDate(LocalDate.now().plusMonths(100)));
        group.setGroupName("TEST_GROUP_NAME");
        event.setEventNote("UNIT_TEST_NOTE");
        payment.setAmount(123456.12);

        memberDao.updateMember(member);
        groupMemberDao.updateGroupMember(groupMember);
        groupDao.updateGroup(group);
        eventDao.updateEvent(event);
        paymentDao.updatePayment(payment);

        try {
            assertNotEquals(SampleData.getMembers().get(0).getFirstName(), memberDao.getMemberById(1).getFirstName());
            assertNotEquals(SampleData.getGroupMembers().get(0).getStartDate(), groupMemberDao.getGroupMemberById(1).getStartDate());
            assertNotEquals(SampleData.getGroups().get(0).getGroupName(), groupDao.getGroupById(1).getGroupName());
            assertNotEquals(SampleData.getEvents().get(0).getEventNote(), eventDao.getEventById(1).getEventNote());
            assertNotEquals(SampleData.getPayments().get(0).getAmount(), paymentDao.getPaymentById(1).getAmount());
        }
        catch (AssertionError e) {
            Log.i(APP_TEST, "Update test failed: " + e.getMessage());
            throw new AssertionError(e.getMessage());
        }
        Log.i(APP_TEST, "TEST - Update app entities passed");
    }

    @Test
    public void deleteEntity() {
        memberDao.insertAll(SampleData.getMembers());
        groupDao.insertAll(SampleData.getGroups());
        groupMemberDao.insertAll(SampleData.getGroupMembers());
        eventDao.insertAll(SampleData.getEvents());
        paymentDao.insertAll(SampleData.getPayments());

        //Delete methods will delete entity in each table, by memberId when constrained by foreign key
        eventDao.deleteTest(1);
        paymentDao.deleteTest(1);
        groupMemberDao.deleteTest(1);
        groupDao.deleteTest(1);
        memberDao.deleteTest(1);

        try {
            assertNotEquals(memberDao.getCount(), SampleData.getMembers().size());
            assertNotEquals(groupMemberDao.getCount(), SampleData.getGroupMembers().size());
            assertNotEquals(groupDao.getCount(), SampleData.getGroups().size());
            assertNotEquals(eventDao.getCount(), SampleData.getEvents().size());
            assertNotEquals(paymentDao.getCount(), SampleData.getPayments().size());
        }
        catch (AssertionError e) {
            Log.i(APP_TEST, "Delete test failed: " + e.getMessage());
            throw new AssertionError(e.getMessage());
        }
        Log.i(APP_TEST, "TEST - Delete app entities passed");
    }

}
